-- -- --if not package.loaded['nvim-tree.view'] then
-- -- --  return
-- -- --end
-- --
-- local M = {}
-- local status_ok, nvim_tree_config = pcall(require, "nvim-tree.config")
-- if not status_ok then
-- print('nvim_tree_config not init correctly')
-- return
-- end
-- --
-- M.setup = function()
-- local g = vim.g
-- vim.o.termguicolors = true
-- g.nvim_tree_side = "right"
-- g.nvim_tree_width = 30
-- g.nvim_tree_ignore = { ".git", "node_modules", ".cache" }
-- g.nvim_tree_auto_open = 1
-- g.nvim_tree_auto_close = 1
-- g.nvim_tree_quit_on_open = 0
-- g.nvim_tree_follow = 1
-- g.nvim_tree_indent_markers = 1
-- g.nvim_tree_hide_dotfiles = 1
-- g.nvim_tree_git_hl = 1
-- g.nvim_tree_root_folder_modifier = ":t"
-- g.nvim_tree_tab_open = 0
-- g.nvim_tree_allow_resize = 1
-- g.nvim_tree_lsp_diagnostics = 1
-- g.nvim_tree_auto_ignore_ft = { "startify", "dashboard" }
-- g.nvim_tree_show_icons = {
-- git = 1,
-- folders = 1,
-- files = 1,
-- folder_arrows = 1,
-- }
-- vim.g.nvim_tree_icons = {
-- default = "",
-- symlink = "",
-- git = {
-- unstaged = "",
-- staged = "S",
-- unmerged = "",
-- renamed = "➜",
-- deleted = "",
-- untracked = "U",
-- ignored = "◌",
-- },
-- folder = {
-- default = "",
-- open = "",
-- empty = "",
-- empty_open = "",
-- symlink = "",
-- },
-- }
-- local tree_cb = nvim_tree_config.nvim_tree_callback
-- vim.g.nvim_tree_bindings = {
-- { key = { "l", "<CR>", "o" }, cb = tree_cb "edit" },
-- { key = "h", cb = tree_cb "close_node" },
-- { key = "v", cb = tree_cb "vsplit" },
-- }
-- end
-- local view_status_ok, view = pcall(require, "nvim-tree.view")
-- if not view_status_ok then
-- return
-- end
-- M.toggle_tree = function()
-- if view.win_open() then
-- require("nvim-tree").close()
-- if package.loaded["bufferline.state"] then
-- require("bufferline.state").set_offset(0)
-- end
-- else
-- if package.loaded["bufferline.state"] then
-- -- require'bufferline.state'.set_offset(31, 'File Explorer')
-- require("bufferline.state").set_offset(31, "")
-- end
-- require("nvim-tree").find_file(true)
-- end
-- end
-- --
-- return M
-- ====================
-- local M = {}
-- local status_ok, nvim_tree_config = pcall(require, "nvim-tree.config")
-- if not status_ok then
--     print('nvim-tree not init correclty')
--     return
-- end
-- local tree_cb = require'nvim-tree.config'.nvim_tree_callback
-- print(tree_cb)
-- vim.g.nvim_tree_bindings = {
--   { key = {"<Cr>","h", "l", "<2-LeftMouse>"}, cb = tree_cb("edit") },
-- { key = {"<2-RightMouse>", "<C-]>"},    cb = tree_cb("cd") },
-- { key = "<C-v>",                        cb = tree_cb("vsplit") },
-- { key = "<C-x>",                        cb = tree_cb("split") },
-- { key = "<C-t>",                        cb = tree_cb("tabnew") },
-- { key = "<",                            cb = tree_cb("prev_sibling") },
-- { key = ">",                            cb = tree_cb("next_sibling") },
-- { key = "P",                            cb = tree_cb("parent_node") },
-- { key = "<BS>",                         cb = tree_cb("close_node") },
-- { key = "<S-CR>",                       cb = tree_cb("close_node") },
-- { key = "<Tab>",                        cb = tree_cb("preview") },
-- { key = "K",                            cb = tree_cb("first_sibling") },
-- { key = "J",                            cb = tree_cb("last_sibling") },
-- { key = "I",                            cb = tree_cb("toggle_ignored") },
-- { key = "H",                            cb = tree_cb("toggle_dotfiles") },
-- { key = "R",                            cb = tree_cb("refresh") },
-- { key = "a",                            cb = tree_cb("create") },
-- { key = "d",                            cb = tree_cb("remove") },
-- { key = "r",                            cb = tree_cb("rename") },
-- { key = "<C-r>",                        cb = tree_cb("full_rename") },
-- { key = "x",                            cb = tree_cb("cut") },
-- { key = "c",                            cb = tree_cb("copy") },
-- { key = "p",                            cb = tree_cb("paste") },
-- { key = "y",                            cb = tree_cb("copy_name") },
-- { key = "Y",                            cb = tree_cb("copy_path") },
-- { key = "gy",                           cb = tree_cb("copy_absolute_path") },
-- { key = "[c",                           cb = tree_cb("prev_git_item") },
-- { key = "]c",                           cb = tree_cb("next_git_item") },
-- { key = "-",                            cb = tree_cb("dir_up") },
-- { key = "q",                            cb = tree_cb("close") },
-- { key = "?",                           cb = tree_cb("toggle_help") },
-- { key = "g?",                           cb = tree_cb("toggle_help") },
